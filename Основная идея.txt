
Проект создан и дополнялся для изучения шаблонов проектирования, поэтому в нём найдётся немало лишнего. На этом же курсе изучались диаграммы, поэтому у проекта есть диаграмма. Проект сделан без использования Spring.

Проект изображает работу некоего центра обслуживания: поликлиника, МФЦ, библиотека, сервис-центр, … Всё очень абстрактно и понарошку.

Основу работы проекта составляет обработка «запросов» пользователей. В качестве результата обработки запроса создаётся «сертификат». Для создания запросов используется онлайн-форма. Изготовленные сертификаты хранятся в БД.

Подробнее:

Запросы, поступающие извне, изображаются в виде объектов Customer. Запрос содержит: ID, причину (Causes), операцию (CosOperations). Запросы принимает Receptionist, назначает им приоритет, и в виде Request отдаёт в Publisher.

Publisher сортирует запросы по специализации (по «причине») и помещает их в соответствующий Assistant. Assistant хранит запросы в приоритетной очереди.

Обработкой запросов управляет Dispatcher: берёт запрос у Assistant-ов, отдаёт их на обработку в Executant-ы, а с результатами обработки — с сертификатами — поступает в соответствии с типом «операции». За операции отвечают три OperationHandler-а (Maker, Saver, Printer). Независимо от типа операции сертификат сохраняется в БД (StorageServise).

P.S.
По первоначальной задумке Publisher должен был выставлять запросы на шину (RebbitMQ), а темами запросов должны были служить «причины». Assistant'ы должны были забираnm запросы с шины относить их обработчикам. Но реализация этого первоначального варианта грозила не поместиться в «небольшую схему», из-за чего и была упрощена.

P.P.S.
Фронт написан с использованием Ангуляра. Я не стал «городить огород» как в J7 и для формы нарыл в сети Ангуляр-пример попроще. Уж не знаю, какие именно демоны пробудились в этом …софте, но к концу проекта Ангуляр стало колбасить при ЛЮБОМ изменении сраницы с формой. В результате она так и осталась немного недоделанной.