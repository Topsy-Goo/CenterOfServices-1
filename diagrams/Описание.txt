
Проект изображает работу некоего центра обслуживания: поликлиника, МФЦ, библиотека, сервис-центр, …
(Код проекта сам является наброском и не проверялся на запускаемость.)

Запросы, поступающие извне, изображаются в виде объектов Customer. Запросы принимает Dispatcher (IReceptionist), оборачивает их в Request и отдаёт в Publisher (IPublisher).

Publisher выбирает Assistant'а (согласно специализации, которую изображают Causes), передаёт запрос ему, а Assistant помещает запрос в приоритетную очередь, откуда их асинхронно забирает Executant.

Executant изготавливает Sertifcate и отдаёт его на хранение в StorageServise (IStorage). Sertifcate изображает оказанную услугу (или выполненный запрос). Позже Customer может прийти и запросить список готовых сертификатов.

По первоначальной задумке Publisher должен был выставлять запросы на шину (RebbitMQ), а темами запросов должны были служить Causes. Assistant'ы должны были изображать роботов, забирающих запросы с шины. Но реализация этого первоначального варианта грозила не поместиться в «небольшую схему», из-за чего и была упрощена.